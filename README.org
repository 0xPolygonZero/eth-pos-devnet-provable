#+TITLE: Erigon + Geth Proof of Stake Devnet
#+DATE:
#+AUTHOR: John Hilliard
#+EMAIL: jhilliard@polygon.technology
#+CREATOR: John Hilliard
#+DESCRIPTION:


#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \usepackage{lmodern}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_CLASS_OPTIONS: [letterpaper]

This repository provides a docker-compose file to run a
fully-functional, local development network for Ethereum with
proof-of-stake enabled. This configuration uses [[https://github.com/prysmaticlabs/prysm][Prysm]] as a consensus
client and [[https://github.com/ethereum/go-ethereum][geth]] / [[https://github.com/ledgerwatch/erigon][erigon]] for execution. *It starts from
proof-of-stake* and does not go through the Ethereum merge.

This sets up a single node development network with 64
deterministically-generated validator keys to drive the creation of
blocks in an Ethereum proof-of-stake chain.

The development net is fully functional and allows for the deployment
of smart contracts and all the features that also come with the Prysm
consensus client such as its rich set of APIs for retrieving data from
the blockchain. This development net is a great way to understand the
internals of Ethereum proof-of-stake and to mess around with the
different settings that make the system possible.

* Running the devnet

First, checkout this repository and install docker. Then run:

#+begin_src bash
docker compose up -d
#+end_src

You will see the following:

#+begin_example
$ docker compose up -d
[+] Running 7/7
[+] Running 10/10
 ✔ Container eth-pos-devnet-create-beacon-chain-genesis-1  Exited
 ✔ Container eth-pos-devnet-create-beacon-node-keys-1      Exited
 ✔ Container eth-pos-devnet-beacon-chain-2-1               Started
 ✔ Container eth-pos-devnet-beacon-chain-1-1               Started
 ✔ Container eth-pos-devnet-geth-genesis-1                 Exited
 ✔ Container eth-pos-devnet-geth-import-1                  Exited
 ✔ Container eth-pos-devnet-erigon-genesis-1               Started
 ✔ Container eth-pos-devnet-validator-1                    Started
 ✔ Container eth-pos-devnet-erigon-1                       Started
 ✔ Container eth-pos-devnet-geth-1                         Started
#+end_example

To stop the containers you can run ~docker compose stop~. Each time
you restart, you can wipe the old data using ~make clean~

Next, you can inspect the logs of the different services launched

#+begin_src bash
docker logs eth-pos-devnet-geth-1 -f
#+end_src

* Available Features

- Starts from the Capella Ethereum hard fork
- The network launches with a [[https://github.com/ethereum/consensus-specs/blob/dev/solidity_deposit_contract/deposit_contract.sol][Validator Deposit Contract]] deployed at
  address ~0x4242424242424242424242424242424242424242~. This can be
  used to onboard new validators into the network by depositing 32 ETH
  into the contract
- The default account used in the go-ethereum node is address
  ~0x85da99c8a7c2c95964c8efd687e95e632fc533d6~ which comes seeded with
  ETH for use in the network. This can be used to send transactions,
  deploy contracts, and more
- The default account, ~0x85da99c8a7c2c95964c8efd687e95e632fc533d6~ is
  also set as the fee recipient for transaction fees proposed
  validators in Prysm. This address will be receiving the fees of all
  proposer activity
- The go-ethereum JSON-RPC API is available at http://geth:8545
- The Prysm client's REST APIs are available at
  http://beacon-chain:3500. For more info on what these APIs are, see
  [[https://ethereum.github.io/beacon-APIs/][here]]
- The Prysm client also exposes a gRPC API at http://beacon-chain:4000



* Short Cuts

Create the genesis file allocations for our mnemonic

#+begin_src bash
polycli wallet inspect --mnemonic "code code code code code code code code code code code quality" | jq '.Addresses[] | {"key": .ETHAddress, "value": { "balance": "0x21e19e0c9bab2400000"}}' | jq -s 'from_entries'
#+end_src


* Jerrigon Testing Procedure

The intent of this repo is to be able to test Erigon State Witnesses
against the Zero Pover. Using this devnet setup, here is a procedure
for creating some test data.

1. Start the devnet up with ~docker compose up~
2. Wait for blocks to start being produced. This should only take a few seconds
3. Generate some load and test transactions. I'm generally using this
   [[https://github.com/maticnetwork/jhilliard/tree/GH013-bypass/snowball][snowball]] script which creates a bunch of weird transactions for
   testing.
4. Once the load is done, you can stop the devnet with ~docker compose
   stop~
5. Checkout and build [[https://github.com/cffls/erigon/tree/feat/zero][jerrigon]] from the ~feat/zero~ branch. We'll need
   builds of the ~state~ binary along with ~erigon~
6. Create a copy of the erigon state directory to avoid corrupting things

#+begin_src bash
sudo cp -r execution/erigon/ execution/erigon.bak
sudo chown -R $USER:$USER execution/erigon.bak/
#+end_src

7. Run the stateless command

#+begin_src bash
~/code/jerrigon/build/bin/state stateless --genesis execution/genesis.json --block 1 --datadir $PWD/execution/erigon.bak --witnessDbFile $PWD/execution/erigon.bak/chaindata/ --statefile $PWD/jerrigon-state --chain mainnet
#+end_src
